@model Padaria.Web.Models.PayBoxViewModel

@{
    ViewBag.Title = "PayBox";
}


<div class="col-lg-3">

    @using (Html.BeginForm(actionName: null, controllerName: null, method: FormMethod.Get, routeValues: null, htmlAttributes: new { id = "__AjaxAntiForgeryForm" }))
    {
        <br />
        <br />
        <br />
        <div class="form-horizontal">


            <h4 style="text-align:center">Control</h4>
            <hr />
            <div class="form-group">
                @Html.LabelFor(c => c.ControlsCode)
                @Html.TextBoxFor(c => c.ControlsCode, htmlAttributes: new { @class = "form-controla" })
                @Html.ValidationMessageFor(c => c.ControlsCode, null, htmlAttributes: new { @class = "text-danger" })

            </div>

            <h4 style="text-align:center">Product</h4>
            @* <hr />*@
            <div class="form-group form-horizontal form-inline">

                @Html.LabelFor(expression: c => c.SellByWeight, htmlAttributes: new { @style = "font:bold" })
                @Html.CheckBoxFor(c => c.SellByWeight, htmlAttributes: new { @class = "checkbox" })
                @Html.ValidationMessageFor(c => c.SellByWeight, null, htmlAttributes: new { @class = "text-danger" })
                <br />
                @Html.LabelFor(c => c.Quantity)
                @Html.TextBoxFor(c => c.Quantity, htmlAttributes: new { @class = "form-controla" })
                @Html.ValidationMessageFor(c => c.Quantity, null, htmlAttributes: new { @class = "text-danger" })

                @Html.LabelFor(c => c.Product.Code)
                @Html.TextBoxFor(c => c.Product.Code, htmlAttributes: new { @class = "form-controla" })
                @Html.ValidationMessageFor(c => c.Product.Code, null, htmlAttributes: new { @class = "text-danger" })
            </div>
            <h4 style="text-align:center">Payment</h4>
            @* <hr />*@
            <div class="form-group form-horizontal">
                @Html.LabelFor(c => c.TypeOfPayment)
                @Html.DropDownListFor(c => c.Sale.TypeOfPaymentID, Model.TypeOfPayment, htmlAttributes: new { @class = "form-controla" })

                @Html.LabelFor(c => c.ValuePaid)
                @Html.TextBoxFor(c => c.ValuePaid, htmlAttributes: new { @class = "form-controla" })
                <b>
                    @Html.LabelFor(c => c.Transshipment)
                    @Html.TextBoxFor(c => c.Transshipment, htmlAttributes: new { @class = "form-controla", @readonly = true, @style = "background-color:yellow" })
                </b>
                <br />
                <a href="#" class="btn btn-primary" style="width:100%">Save Sale</a>


            </div>

        </div>






    }
</div>
<div class="col-lg-9">
    <br />
    <br />
    <br />
    <div class="form-horizontal">
        <div class="form-group form-horizontal">

            @Html.Partial(partialViewName: "_PayboxMenu")

        </div>
    </div>
    <h4 style=" text-align:center">
        Products in Control
    </h4>
    <hr />
    <div id="dTbl">



    </div>
</div>


@Html.Partial("Alert")



<script type="text/javascript">

    $(document).ready(function () {

        $('#footer').hide();
        $('#Quantity').val("1");
        $('#Transshipment').val("");
        $('#ValuePaid').val("");

        $('.btn.btn-primary').attr("disabled", true);
        focusInTxtGetControl();

    });
    $('#Quantity').change(function () {
        debugger;
        if ($('#SellByWeight').is(":checked")) {
            $('#Quantity').addClass('form-controla.valid');
            
        }
      
    });
    $('#SellByWeight').change(function () {
        if ($(this).is(":checked")) {
            $("label:contains('Quantity')").text('Weight of Product');
            //hideTxtQuantity();
        }
        else {
            $("label:contains('Weight of Product')").text('Quantity');
            //showTxtQuantity();
        }
    });

    function showTxtQuantity() {
        $('#Quantity').show();
        $("label:Contains('Quantity')").show();
    }
    function hideTxtQuantity() {
        $('#Quantity').hide();
        $("label:Contains('Quantity')").hide();
    }
    function ClosePaybox() {
        $.ajax({
            url: "/PayBox/GetClosePayBox",
            type: "Get",
            datatype: "html",
            data: {},
            success: function (data) {
                $(data).modal('show');
            }, error: function () {
                alert("Error", "Error")
            }




        });
    }

    function OpenPaybox() {
        $.ajax({
            url: "/PayBox/GetOpenPayBox",
            type: "Get",
            datatype: "html",
            data: {},
            success: function (data) {
                $(data).modal('show');
            }, error: function () {
                alert("Error", "Error")
            }




        });
    }
    function RecieveCredit() {

        $.ajax({
            url: "/Credit/Recieve",
            type: "Get",
            datatype: "html",
            success: function (data) {

                $(data).modal('show');
            }, error: function (data) {
                alert(data);
            }


        });

    }
    function PayCredit() {
        debugger;
        GetFullValue(function (output) {

            $.ajax({
                url: "/PayBox/PayCredit",
                type: "Get",
                datatype: "Html",
                data: { Value: output },
                success: function (data) {
                    $(data).modal('show');


                }
                , error: function () {
                    alert('Error');
                }


            });


        });

    }


    $('select').on('change', function () {
        switch (($("select option:selected").text())) {
            case "Money":
                showWhenPaidIsEqualsMoney();
                ClearAllFields();
                ShowFieldRelatedWithMoneyPayment();
                $.ajax({
                    url: "/PayBox/GetQuantityProduct",
                    type: "Get",
                    datatype: "json",
                    data: {},
                    success: function (data) {
                        focusInTxtValuePaid();
                        if (data.Number > 0) {
                            $('.btn.btn-primary').attr("disabled", false);
                        }
                        else {
                            $('.btn.btn-primary').attr("disabled", true);
                        }
                    }



                });

                break;
            case "Check":
                $('.btn.btn-primary').attr("disabled", false);
                HideFieldRelatedWithMoneyPayment();
                hideWhenPaidIsDifferentOfMoney();               
                break;
            case "Credit":
                $('.btn.btn-primary').attr("disabled", false);
                HideFieldRelatedWithMoneyPayment();
                hideWhenPaidIsDifferentOfMoney();
                PayCredit();
                break;
            default:

        }

    });
    function showWhenPaidIsEqualsMoney() {
        $("label:Contains('Transshipment')").show();
        $("label:Contains('Value Paid')").show();
    }
    function hideWhenPaidIsDifferentOfMoney() {
        $("label:Contains('Transshipment')").hide();
        $("label:Contains('Value Paid')").hide();
    }
    function focusInTxtValuePaid() {
        $('#ValuePaid').focus();
    }
    function ClearAllFields() {
        $('#ValuePaid').val('');
        $('#Transshipment').val('');
    }
    function HideFieldRelatedWithMoneyPayment() {

        var ids = ['#ValuePaid', '#Transshipment'];
        ids.forEach(function (index) {

            $(index).hide();
        });
    }
    function ShowFieldRelatedWithMoneyPayment() {

        var ids = ['#ValuePaid', '#Transshipment'];
        ids.forEach(function (index) {

            $(index).show();
        });
    }
    function focusInTxtGetControl() {
        $('#ControlsCode').focus();
    }
    $('.btn.btn-primary').click(function (e) {

        var valid = $('.btn.btn-primary').attr("disabled");
        if (valid == undefined) {

            var price = $('#Transshipment').val();
            var type = $("select option:selected").text();

            if (price != "" || type == "Money") {
                $.ajax({
                    url: "/PayBox/SaveSale",
                    datatype: "json",
                    type: "Get",
                    data: { "Sale.TypeOfPaymentID": $('#Sale_TypeOfPaymentID').val() },
                    success: function (data) {
                        if (data.SaleID > 0) {
                            ClearFields();

                        }
                    }
                });
            }
            else {
                $('#modal').modal('show');
                $('#txt').text("To complete a sale is necessary to make the first payment.");
            }

        }
        else {
            $('#modal').modal('show');
            $('#txt').text("To complete a sale is necessary to buy a product.");
        }

    });



    function ClearFields() {
        $.ajax({
            url: "/PayBox/FinishSale",
            type: "Get",
            datatype: "html",
            data: { "typeOfPayment": $('#Sale_TypeOfPaymentID').val() },
            success: function (data) {
                $('#modal').modal('show');
                $('#txt').text("Sale completed successfully.");

                $("#btn").click(function () {
                    $(location).attr('href', '/PayBox/PayBox')
                });

            }
        });
    }

    function GetFullValue(hadleDate) {

        $.ajax({

            url: "/PayBox/GetFullValue",
            datatype: "json",
            type: "Get",
            success: function (data) {

                hadleDate(data.Result);
            }



        });
    }
    $('#ValuePaid').keypress(function (e) {
        if (e.which == 13) {

            e.preventDefault();
            $.ajax({

                url: "/PayBox/GetFullValue",
                datatype: "json",
                type: "Get",
                success: function (data) {

                    var fullPaid = $('#ValuePaid').val();
                    if (fullPaid >= data.Result) {
                        $('#Transshipment').val('$ ' + (fullPaid - data.Result).toFixed(2));
                        $('.btn.btn-primary').attr("disabled", false);
                    }
                    else {
                        $('#modal').modal('show');
                        $('#txt').text("The amount paid must be greater or equal to the purchase price.");
                        $('#Product_Code').val("");
                    }

                }



            });
        }
    });

    $('#Product_Code').keypress(function SaveProduct(e) {
        if (e.which == 13) {
            debugger;
            $('#Transshipment').val("");
            $('#ValuePaid').val("");
            var Code = $('#Product_Code').val();
            var quantity = $('#Quantity').val();
            var byWeight = $('#SellByWeight').prop( "checked" );
            $.ajax({

                url: "/Paybox/InsertProduct",
                type: "GET",
                datatype: "html",
                data: { "Product.Code": Code, Quantity: quantity, ByWeight: byWeight },
                success: function (data) {
                    debugger;
                    var ismodal = data;
                    if (ismodal.indexOf("modal") != -1) {
                        $('#modal').modal('show');
                        $('#txt').text("Product with that code not exists in this system.");
                        $('#Product_Code').val("");
                        $('.btn.btn-primary').attr("disabled", false);
                    }
                    else {
                        $('#Product_Code').val("");
                        $("#dTbl").empty();
                        $("#dTbl").show();
                        $("#dTbl").html(data);
                        focusInTxtGetProduct();
                    }

                }, error: function () {

                    alert('error');
                }
            })
        }

    });
    function focusInTxtGetProduct() {
        $('#Product_Code').focus();
    }

    $('#ControlsCode').keypress(function GetControlItens(e) {

        if (e.which == 13) {

            $('#Transshipment').val("");
            $('#ValuePaid').val("");
            var Code = $('#ControlsCode').val();




            //var token = $('#__AjaxAntiForgeryForm input[name= "__RequestVerificationToken"]').val();
            //var tokenadr = $('form[action="/Paybox/GetControlItens"] input[name="__RequestVerificationToken"]').val();
            //var headers = {};
            //var headersadr = {};
            //headers['__RequestVerificationToken'] = token;
            //headersadr['__RequestVerificationToken'] = tokenadr;


            $.ajax({
                url: "/Paybox/GetControlItens",
                type: "Get",
                datatype: "Html",
                data: { "ControlsCode": Code/*, __RequestVerificationToken: token */ }/*,
                headers: headersadr*/,
                success: function (data) {
                    focusInTxtGetControl();
                    var ismodal = data;

                    $('#btnGetControl').attr("disabled", true);
                    if (ismodal.indexOf("modal") != -1) {

                        $('#modal').modal('show');
                        //$(data).modal('show');
                        //var txt = $(data).find('#txt');
                        //txt.text("Command with that code not exists in this system.");
                        $('#txt').text("Command with that code not exists in this system.");
                        focusInTxtGetControl();
                        $('#ControlsCode').val("");
                    }
                    else {
                        $("#dTbl").empty();
                        $("#dTbl").show();
                        $("#dTbl").html(data);
                        focusInTxtGetProduct();
                        $('#ControlsCode').val("");
                    }

                }

            });
        }


    }
);





</script>
